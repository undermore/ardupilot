# hw definition file for processing by chibios_hwdef.py
# for SFF765 & F767 hardware without IOMCU

MCU STM32F7xx STM32F767xx

# crystal frequency
OSCILLATOR_HZ 16000000
define STM32_LSECLK 32768U
define STM32_LSEDRV (3U << 3U)
define STM32_PLLSRC STM32_PLLSRC_HSE
define STM32_PLLM_VALUE 8
define STM32_PLLN_VALUE 216
define STM32_PLLP_VALUE 2
define STM32_PLLQ_VALUE 9

define CONFIG_HAL_BOARD_SUBTYPE HAL_BOARD_SUBTYPE_CHIBIOS_PPXV5
define HAL_CHIBIOS_ARCH_PPXV5 1

# board ID for firmware load
# same as FMUV5
# list of board IDs: https://github.com/ArduPilot/Bootloader/blob/master/board_types.txt
APJ_BOARD_ID 50

FLASH_RESERVE_START_KB 32

# board voltage
STM32_VDD 330U

# flash size
FLASH_SIZE_KB 2048

env OPTIMIZE -O2

# OTG1 is hal.uartA ; USART1 is hal.uartB ...
# Serial 0-6 assigned in AP_SerialManager.cpp as below:
# state[0].uart = hal.uartA;  // serial0, always console
# state[1].uart = hal.uartC;  // serial1, normally telem1
# state[2].uart = hal.uartD;  // serial2, normally telem2
# state[3].uart = hal.uartB;  // serial3, normally 1st GPS
# state[4].uart = hal.uartE;  // serial4, normally 2nd GPS
# state[5].uart = hal.uartF;  // serial5
# state[6].uart = hal.uartG;  // serial6
UART_ORDER OTG1 USART1 USART2 USART3 UART4 UART8 UART7

# USB interface as well as Serial 0
PA11 OTG_FS_DM OTG1
PA12 OTG_FS_DP OTG1

# For SWD debugging 
PA13 JTMS-SWDIO SWD
PA14 JTCK-SWCLK SWD

# SPI1
PG11 SPI1_SCK SPI1
PA6 SPI1_MISO SPI1
PD7 SPI1_MOSI SPI1

# SPI2
PI1 SPI2_SCK SPI2
PC2 SPI2_MISO SPI2
PI3 SPI2_MOSI SPI2

# SPI4 - sensors2
PE2 SPI4_SCK SPI4
PE13 SPI4_MISO SPI4
PE6 SPI4_MOSI SPI4

# SPI5 - external1 (disabled to save DMA channels)
# PF7 SPI5_SCK SPI5 
# PF8 SPI5_MISO SPI5
# PF9 SPI5_MOSI SPI5

# SPI6 - external2 (disabled to save DMA channels)
# PG13 SPI6_SCK SPI6
# PG12 SPI6_MISO SPI6
# PB5 SPI6_MOSI SPI6

# sensor CS
PF11 MS5611_CS CS
PF2  ICM20689_CS CS SPEED_VERYLOW
PF3  ICM20602_CS CS SPEED_VERYLOW
PF4  BMI055_G_CS CS
PG10 BMI055_A_CS CS
PF5 FRAM_CS CS SPEED_VERYLOW

# I2C buses

PB8 I2C1_SCL I2C1
PB9 I2C1_SDA I2C1

PF1 I2C2_SCL I2C2
PF0 I2C2_SDA I2C2

PH7 I2C3_SCL I2C3
PH8 I2C3_SDA I2C3

PF14 I2C4_SCL I2C4
PF15 I2C4_SDA I2C4

# order of I2C buses
I2C_ORDER I2C3 I2C1 I2C2 I2C4


# enable pins
PE3 VDD_3V3_SENSORS_EN OUTPUT HIGH

# start peripheral power off, then enable after init
# this prevents a problem with radios that use RTS for
# bootloader hold
PF12 nVDD_5V_HIPOWER_EN OUTPUT HIGH
PG4  nVDD_5V_PERIPH_EN OUTPUT HIGH

PG5  VDD_5V_RC_EN OUTPUT HIGH
PG6  VDD_5V_WIFI_EN OUTPUT HIGH
PG7  VDD_3V3_SD_CARD_EN OUTPUT HIGH

# drdy pins

#PB4  DRDY1_ICM20689 INPUT
#PB14 DRDY2_BMI055_GYRO INPUT
#PB15 DRDY3_BMI055_ACC INPUT
#PC5  DRDY4_ICM20602 INPUT
#PC13 DRDY5_BMI055_GYRO INPUT
#PD10 DRDY6_BMI055_ACC INPUT

# USART2 is telem1
PD6 USART2_RX USART2
PD5 USART2_TX USART2
PD3 USART2_CTS USART2
PD4 USART2_RTS USART2

# USART1 is GPS1
PB7 USART1_RX USART1 NODMA
PB6 USART1_TX USART1 NODMA

# USART3 is telem2
PD9 USART3_RX USART3
PD8 USART3_TX USART3
PD11 USART3_CTS USART3
# PD12 USART3_RTS USART3

# UART4 GPS2
PD0 UART4_RX UART4 NODMA
PD1 UART4_TX UART4 NODMA

# UART7
PF6 UART7_RX UART7 NODMA
PE8 UART7_TX UART7 NODMA

# UART8 is debug
PE0 UART8_RX UART8
PE1 UART8_TX UART8

# RC input
PC7 TIM3_CH2 TIM3 RCININT FLOAT LOW

# UART for IOMCU
# IOMCU_UART UART8

# enable RTSCTS support
define AP_FEATURE_RTSCTS 1
define AP_FEATURE_SBUS_OUT 0

STM32_ST_USE_TIMER 5
undef PA15
undef PD12
undef PB10
undef PB11
undef PD15
undef PI5
undef PI6
undef PI7
undef PA5
undef PB3
undef FMU_CAP1
undef FMU_CAP2
undef FMU_CAP3
undef nSPI5_RESET_EXTERNAL1
undef HAL_GPIO_PIN_nSPI5_RESET_EXTERNAL1

# PWM AUX channels
PE14 TIM1_CH4 TIM1 PWM(1) GPIO(56)
PA10 TIM1_CH3 TIM1 PWM(2) GPIO(57)
PE11 TIM1_CH2 TIM1 PWM(3) GPIO(58)
PE9  TIM1_CH1 TIM1 PWM(4) GPIO(59)
PD15 TIM4_CH4 TIM4 PWM(5) GPIO(60)
PD14 TIM4_CH3 TIM4 PWM(6) GPIO(61)
PD13 TIM4_CH2 TIM4 PWM(7) GPIO(62)
PD12 TIM4_CH1 TIM4 PWM(8) GPIO(63)
# we consider capture pins and SPARE4 as PWM output
# us to use TIM2 for extra PWM outputs
PA5  TIM2_CH1 TIM2 PWM(9)  GPIO(64)
PB3  TIM2_CH2 TIM2 PWM(10) GPIO(65)
PB10 TIM2_CH3 TIM2 PWM(11) GPIO(66)
PB11 TIM2_CH4 TIM2 PWM(12) GPIO(67)
PI5  TIM8_CH1 TIM8 PWM(13) GPIO(50)
PI6  TIM8_CH2 TIM8 PWM(14) GPIO(51)
PI7  TIM8_CH3 TIM8 PWM(15) GPIO(52)
PI2  TIM8_CH4 TIM8 PWM(16) GPIO(53)
PH6  TIM12_CH1 TIM12 PWM(17) GPIO(54) NODMA
PH9  TIM12_CH2 TIM12 PWM(18) GPIO(55) NODMA


define RELAY1_PIN_DEFAULT 54
define RELAY2_PIN_DEFAULT 55

# we need to disable DMA on the last 2 FMU channels
# as timer 12 doesn't have a TIMn_UP DMA option


# assigning AUX channels to PWM output
# all unassigned channels can be used for GPIO or timer capture
# for intance set BOARD_PWM_COUNT_DEFAULT = 12 then AUX1-AUX12 can be used for PWM output
# the function of AUX13 & 14 can be defined by param RPM_PIN and RPM2_PIN
# set RPM_PIN = 50 & RPM_TYPE = 51 to use AUX13 & 14 as input signal edge counter
# Notice: TIM12_CH1 & TIM12_CH2 unsupport DMA can not use as RPM_PIN

# for another intance on a QUAD frame set BOARD_PWM_COUNT_DEFAULT = 7 assign Servo5-7 to CAM tilt roll and pan
# set CAM_TRIGG_TYPE=1 and RELAY_PIN=63 to use Servo8 as Relay control PIN
define BOARD_PWM_COUNT_DEFAULT 12

# PWM output for buzzer
PE5 TIM9_CH1 TIM9 GPIO(77) ALARM

# analog in
PA0 BATT_VOLTAGE_SENS ADC1 SCALE(1)
PA1 BATT_CURRENT_SENS ADC1 SCALE(1)

PA2 BATT2_VOLTAGE_SENS ADC1 SCALE(1)
PA3 BATT2_CURRENT_SENS ADC1 SCALE(1)

PC4 SPARE1_ADC1 ADC1 SCALE(1)
PA4 SPARE2_ADC1 ADC1 SCALE(1)

PB0 RSSI_IN ADC1 SCALE(1)

#PC3 HW_REV_SENS ADC1 SCALE(1)
#PC2 HW_VER_SENS ADC1 SCALE(1)

PC0 VDD_5V_SENS ADC1 SCALE(2)
PC1 SCALED_V3V3 ADC1 SCALE(2)

# setup scaling defaults for PixHackV5 power brick
define HAL_BATT_VOLT_SCALE 18.0
define HAL_BATT_CURR_SCALE 24.0
define HAL_BATT_VOLT_PIN 0
define HAL_BATT_CURR_PIN 1
define HAL_BATT2_VOLT_PIN 2
define HAL_BATT2_CURR_PIN 3

# CAN bus
PI9  CAN1_RX CAN1
PH13 CAN1_TX CAN1

PB12 CAN2_RX CAN2
PB13 CAN2_TX CAN2

PH2 GPIO_CAN1_SILENT OUTPUT PUSHPULL SPEED_LOW LOW GPIO(70)
PH3 GPIO_CAN2_SILENT OUTPUT PUSHPULL SPEED_LOW LOW GPIO(71)
PH4 GPIO_CAN3_SILENT OUTPUT PUSHPULL SPEED_LOW LOW GPIO(72)

# GPIOs
PA7 HEATER_EN OUTPUT LOW GPIO(80)
define HAL_HEATER_GPIO_PIN 80

PG1 VDD_BRICK_VALID INPUT PULLUP
PG2 VDD_BRICK2_VALID INPUT PULLUP
PG3 nVBUS INPUT PULLUP
PF13 VDD_5V_HIPOWER_OC INPUT PULLUP
PE15 VDD_5V_PERIPH_OC INPUT PULLUP
# PB10 nSPI5_RESET_EXTERNAL1 OUTPUT HIGH

# capture pins
#PA5 FMU_CAP1 INPUT  GPIO(66)
#PB3 FMU_CAP2 INPUT  GPIO(67)
#PB11 FMU_CAP3 INPUT GPIO(68)
PI0 FMU_SPARE_4 INPUT GPIO(69)

# SPI devices
SPIDEV icm20689       SPI1 DEVID1  ICM20689_CS  MODE3  2*MHZ  8*MHZ
SPIDEV bmi055_g       SPI1 DEVID2  BMI055_G_CS  MODE3 10*MHZ 10*MHZ
SPIDEV bmi055_a       SPI1 DEVID3  BMI055_A_CS  MODE3 10*MHZ 10*MHZ
SPIDEV ms5611         SPI1 DEVID4  MS5611_CS    MODE3 20*MHZ 20*MHZ
SPIDEV icm20602       SPI1 DEVID1  ICM20602_CS  MODE3  2*MHZ  8*MHZ
SPIDEV ramtron        SPI2 DEVID1  FRAM_CS      MODE3  8*MHZ  8*MHZ

# in terms of icm20689 & icm20602
# up to 3 IMUs
IMU Invensense SPI:icm20689 ROTATION_ROLL_180
IMU Invensense SPI:icm20602 ROTATION_NONE
# 3rd could be BMMI055 or BMI088
IMU BMI055 SPI:bmi055_a SPI:bmi055_g ROTATION_YAW_270
IMU BMI088 SPI:bmi055_a SPI:bmi055_g ROTATION_YAW_270


# for IST8310 that is not sure which polarity of rotation should be point to the nose of aircraft, maybe X+ is correct
define HAL_DEFAULT_INS_FAST_SAMPLE 1
define HAL_PROBE_EXTERNAL_I2C_COMPASSES
COMPASS IST8310 I2C:ALL_EXTERNAL:0x0E true  ROTATION_YAW_90 
COMPASS IST8310 I2C:ALL_INTERNAL:0x0E false ROTATION_YAW_90



# one baro
BARO FBM320 I2C:ALL:0x6C


# two baro
BARO MS56XX SPI:ms5611

# microSD support
PC8 SDMMC_D0 SDMMC1
PC9 SDMMC_D1 SDMMC1
PC10 SDMMC_D2 SDMMC1
PC11 SDMMC_D3 SDMMC1
PC12 SDMMC_CK SDMMC1
PD2 SDMMC_CMD SDMMC1

# red LED marked as B/E
PB1 LED_RED OUTPUT GPIO(90)

# green LED marked as PWR. We leave this solid on, but allow
# for it to be controlled as a relay if needed
PC6 LED_GREEN OUTPUT GPIO(91) LOW

# blue LED marked as ACT
PG9 LED_BLUE OUTPUT GPIO(92) HIGH

# setup for BoardLED2
define HAL_GPIO_A_LED_PIN 90
define HAL_GPIO_B_LED_PIN 92  


define HAL_GPIO_LED_ON 0


# enable RAMTROM parameter storage
define HAL_STORAGE_SIZE 16384
define HAL_WITH_RAMTRON 1

# allow to have have a dedicated safety switch pin
define HAL_HAVE_SAFETY_SWITCH 1

# define HAL_BARO_DEFAULT HAL_BARO_MS5611_SPI
define HAL_BARO_DEFAULT HAL_BARO_FBM320_I2C

define HAL_COMPASS_DEFAULT HAL_COMPASS_NONE
define HAL_COMPASS_AUTO_ROT_DEFAULT 2

DMA_PRIORITY SDMMC* USART6* ADC* SPI* TIM*

#define CH_DBG_ENABLE_ASSERTS TRUE
#define CH_DBG_ENABLE_CHECKS TRUE
#define CH_DBG_SYSTEM_STATE_CHECK TRUE
#define CH_DBG_ENABLE_STACK_CHECK TRUE

# define HAL_SPI_CHECK_CLOCK_FREQ 1

# enable FAT filesystem support (needs a microSD defined via SDMMC)
define HAL_OS_FATFS_IO 1

define HAL_BOARD_LOG_DIRECTORY "/PPXV5/LOGS"
define HAL_BOARD_TERRAIN_DIRECTORY "/PPXV5/TERRAIN"

undef IOMCU_UART
undef AP_FEATURE_SBUS_OUT
